<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JY MEMENTO</title>
    <link>https://toxintoxin.github.io/memento/docs/shiny/</link>
    <description>Recent content on JY MEMENTO</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 12 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://toxintoxin.github.io/memento/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>share</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/share/</link>
      <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/share/</guid>
      <description>&lt;p&gt;分享Shiny app，一般有两种途径：&lt;/p&gt;&#xA;&lt;p&gt;Share your Shiny app as R scripts.&lt;br&gt;&#xA;这是分享应用程序最简单的方式，但只有shiny用户在他们自己的电脑上有R(并且知道如何使用它)，它才有效。用户可以使用这些脚本从他们自己的R会话启动应用程序。&lt;br&gt;&#xA;Share your Shiny app as a web page.&lt;br&gt;&#xA;用户最友好的分享应用程序的方式。用户可以通过网络浏览器浏览到shiny app&lt;/p&gt;&#xA;&lt;p&gt;shinyapps.io&lt;br&gt;&#xA;方便免费, 但是免费计划限制5个app, 每个月只有30hours&lt;/p&gt;&#xA;&lt;p&gt;shiny-server&lt;br&gt;&#xA;需要服务器&lt;/p&gt;&#xA;&lt;p&gt;shinyproxy&lt;br&gt;&#xA;需要服务器&lt;br&gt;&#xA;容器化&lt;br&gt;&#xA;复杂&lt;/p&gt;&#xA;&lt;p&gt;shinylive&lt;br&gt;&#xA;基于WebAssembly&lt;br&gt;&#xA;无需服务器&lt;br&gt;&#xA;可以部署到GitHub page&lt;br&gt;&#xA;较新, 问题较多&lt;/p&gt;</description>
    </item>
    <item>
      <title>shiny-server</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shiny-server/</link>
      <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shiny-server/</guid>
      <description>&lt;h2 id=&#34;虚拟机或物理机安装ubuntu-2204或云服务器&#34;&gt;虚拟机或物理机安装ubuntu 22.04，或云服务器&lt;/h2&gt;&#xA;&lt;p&gt;创建用户的时候取一个中性的名字，该用户具有sudo权限用来执行用户管理等&lt;br&gt;&#xA;比如systemadmin (admin是系统自带的，会冲突)&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置网络&#34;&gt;配置网络&lt;/h2&gt;&#xA;&lt;p&gt;询问网络管理员&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装ssh服务&#34;&gt;安装ssh服务&lt;/h2&gt;&#xA;&lt;p&gt;sudo apt-get update&lt;br&gt;&#xA;sudo apt-get install openssh-server&lt;br&gt;&#xA;查看ssh服务是否开启&lt;br&gt;&#xA;service ssh status&lt;br&gt;&#xA;如果不是active(running)就启动服务&lt;br&gt;&#xA;sudo service ssh restart&lt;br&gt;&#xA;在windows上win+R运行cmd, ubuntu的ip地址是网络管理员给的, 个人的话自己家里的网络，用&lt;code&gt;ip a&lt;/code&gt;查看，inet就是ip地址&lt;br&gt;&#xA;ssh admin@ip&lt;br&gt;&#xA;第一次进去要先yes，然后输入密码，现在可以在windows上通过命令行操作linux&lt;/p&gt;&#xA;&lt;h2 id=&#34;ubuntu内搭建shiny-server&#34;&gt;ubuntu内搭建shiny-server&lt;/h2&gt;&#xA;&lt;p&gt;官网教程{# https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_markup/render-link.html #}&lt;a href=&#34;https://posit.co/download/shiny-server/&#34;&gt;https://posit.co/download/shiny-server/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装R&lt;/p&gt;&#xA;&lt;p&gt;直接按照教程里的&lt;code&gt;sudo apt-get install r-base&lt;/code&gt;安装的R不是最新版的，为了装上最新版本的R，需要多一些操作，参照cran的{# https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_markup/render-link.html #}&lt;a href=&#34;https://cran.r-project.org/bin/linux/ubuntu/&#34;&gt;offical guide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Shiny Server&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装shiny&lt;/p&gt;&#xA;&lt;p&gt;shiny-server安装以后会自动创建一个名为shiny的用户，shiny-server默认是用shiny用户运行的，所以如果是其他用户安装的R包，shiny是没有权限执行的&lt;/p&gt;&#xA;&lt;p&gt;为避坑，先提前安装一些必要的library&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install build-essential&lt;/code&gt;， 否则会&lt;code&gt;sh: 1: make: not found&lt;/code&gt;&lt;br&gt;&#xA;&lt;code&gt;sudo apt-get install zlib1g-dev&lt;/code&gt;，否则会安装不了&lt;code&gt;httpuv&lt;/code&gt;(shiny的一个依赖包)&lt;/p&gt;&#xA;&lt;p&gt;用shiny用户安装shiny&lt;/p&gt;&#xA;&lt;p&gt;测试安装成功没&lt;/p&gt;&#xA;&lt;p&gt;显示版本号就好了&lt;/p&gt;&#xA;&lt;p&gt;官网的做法是为用root权限为所有用户安装包&lt;/p&gt;&#xA;&lt;p&gt;教程里似乎忘记换行了？？会提示&lt;code&gt;su: 用户 -c 不存在&lt;/code&gt;，分两次执行以下&lt;/p&gt;&#xA;&lt;p&gt;或者执行以下行&lt;/p&gt;</description>
    </item>
    <item>
      <title>shinyapps.io</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shinyapps/</link>
      <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shinyapps/</guid>
      <description>&lt;p&gt;Posit(原Rstudio)提供的最方便部署shinyapp的方式&lt;br&gt;&#xA;具有不同的定价计划&#xA;&lt;img src=&#34;images/plan.png&#34; alt=&#34;plan&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;免费计划最多能部署5个app, 每个月共计25个小时的免费使用时长&lt;br&gt;&#xA;打开网页即运行app, 默认设置是用户在15分钟内没有操作时, 会与服务器断开连接以节省资源, 所以频繁地打开app, 会快速消耗免费使用时长&lt;br&gt;&#xA;&lt;img src=&#34;images/usage.png&#34; alt=&#34;usage&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>shinyproxy</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shinyproxy/</link>
      <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shinyproxy/</guid>
      <description>&lt;h2 id=&#34;自动生成shiny的dockerfile&#34;&gt;自动生成shiny的Dockerfile&lt;/h2&gt;&#xA;&lt;p&gt;{# https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_markup/render-link.html #}&lt;a href=&#34;https://www.jumpingrivers.com/blog/shiny-auto-docker/&#34;&gt;https://www.jumpingrivers.com/blog/shiny-auto-docker/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;functions&lt;/p&gt;&#xA;&lt;p&gt;auto-generate dockerfile file&lt;/p&gt;&#xA;&lt;p&gt;build docker image&lt;/p&gt;&#xA;&lt;p&gt;test&lt;/p&gt;&#xA;&lt;p&gt;docker build issues&#xA;&lt;img src=&#34;images/image.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>把shiny应用作为R包开发</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shiny-as-r-package/</link>
      <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shiny-as-r-package/</guid>
      <description>&lt;h2 id=&#34;创建一个新的r包&#34;&gt;创建一个新的R包&lt;/h2&gt;&#xA;&lt;p&gt;使用&lt;code&gt;usethis&lt;/code&gt;包来快速创建一个新的R包结构。&lt;/p&gt;&#xA;&lt;p&gt;这将在当前工作目录中创建一个名为myApp的文件夹，其中包含一个基本的R包结构，&lt;code&gt;DESCRIPTION&lt;/code&gt;，&lt;code&gt;NAMESPACE&lt;/code&gt;，&lt;code&gt;/R&lt;/code&gt;。创建完成后工作目录会自动切换到myApp&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt;里面的Imports声明了依赖的包，会在安装myApp的时候检查尚未安装的依赖包&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;NAMESPACE&lt;/code&gt;里面包含了myApp所用的包或具体函数, 以及产生的函数。 若在某个模块里用了ggplot2的函数, 就需要在&lt;code&gt;NAMESPACE&lt;/code&gt;里面&lt;code&gt;import(ggplot2)&lt;/code&gt;, 并非手动编辑, 通过在模块的.R文件里写注释, 然后用&lt;code&gt;devtools::document()&lt;/code&gt;自动更新&lt;code&gt;NAMESPACE&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加shiny应用程序代码&#34;&gt;添加Shiny应用程序代码&lt;/h2&gt;&#xA;&lt;p&gt;在R包中添加shiny应用程序的代码。通常，shiny应用程序的代码可以放在inst/app目录下。&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用函数&#34;&gt;常用函数&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
