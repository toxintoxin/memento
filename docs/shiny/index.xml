<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JY MEMENTO</title>
    <link>https://toxintoxin.github.io/memento/docs/shiny/</link>
    <description>Recent content on JY MEMENTO</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 19 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://toxintoxin.github.io/memento/docs/shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>把shiny应用作为R包开发</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shiny-as-r-package/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shiny-as-r-package/</guid>
      <description>&lt;h2 id=&#34;创建一个新的r包&#34;&gt;创建一个新的R包&lt;/h2&gt;&#xA;&lt;p&gt;使用&lt;code&gt;usethis&lt;/code&gt;包来快速创建一个新的R包结构。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 安装usethis包（如果尚未安装）&#xD;&#xA;install.packages(&amp;#34;usethis&amp;#34;)&#xD;&#xA;&#xD;&#xA;# 创建一个新的R包&#xD;&#xA;usethis::create_package(&amp;#34;myApp&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将在当前工作目录中创建一个名为myApp的文件夹，其中包含一个基本的R包结构，&lt;code&gt;DESCRIPTION&lt;/code&gt;，&lt;code&gt;NAMESPACE&lt;/code&gt;，&lt;code&gt;/R&lt;/code&gt;。创建完成后工作目录会自动切换到myApp&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt;里面的Imports声明了依赖的包，会在安装myApp的时候检查尚未安装的依赖包&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;NAMESPACE&lt;/code&gt;里面包含了myApp所用的包或具体函数, 以及产生的函数。 若在某个模块里用了ggplot2的函数, 就需要在&lt;code&gt;NAMESPACE&lt;/code&gt;里面&lt;code&gt;import(ggplot2)&lt;/code&gt;, 并非手动编辑, 通过在模块的.R文件里写注释, 然后用&lt;code&gt;devtools::document()&lt;/code&gt;自动更新&lt;code&gt;NAMESPACE&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;添加shiny应用程序代码&#34;&gt;添加Shiny应用程序代码&lt;/h2&gt;&#xA;&lt;p&gt;在R包中添加shiny应用程序的代码。通常，shiny应用程序的代码可以放在inst/app目录下。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 创建inst/app目录&#xD;&#xA;usethis::use_directory(&amp;#34;inst/app&amp;#34;)&#xD;&#xA;&#xD;&#xA;# 在inst/app目录下创建一个app.R文件&#xD;&#xA;file.create(&amp;#34;inst/app/app.R&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常用函数&#34;&gt;常用函数&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 加载当前工作目录下的包&#xD;&#xA;devtools::load_all()&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 更新DESCRIPTION文件&#xD;&#xA;usethis::use_package(&amp;#34;packagename&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 更新NAMESPACE文件&#xD;&#xA;devtools::document()&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# deploy to shinyapps.io&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 从github安装R包&#xD;&#xA;remotes::install_github(&amp;#34;username/repository&amp;#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>share</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/share/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/share/</guid>
      <description>&lt;p&gt;分享Shiny app，一般有两种途径：&lt;/p&gt;&#xA;&lt;p&gt;Share your Shiny app as R scripts.&lt;br&gt;&#xA;这是分享应用程序最简单的方式，但只有shiny用户在他们自己的电脑上有R(并且知道如何使用它)，它才有效。用户可以使用这些脚本从他们自己的R会话启动应用程序。&lt;br&gt;&#xA;Share your Shiny app as a web page.&lt;br&gt;&#xA;用户最友好的分享应用程序的方式。用户可以通过网络浏览器浏览到shiny app&lt;/p&gt;&#xA;&lt;p&gt;shinyapps.io&lt;br&gt;&#xA;方便免费, 但是免费计划限制5个app, 每个月只有30hours&lt;/p&gt;&#xA;&lt;p&gt;shiny-server&lt;br&gt;&#xA;需要服务器&lt;/p&gt;&#xA;&lt;p&gt;shinyproxy&lt;br&gt;&#xA;需要服务器&lt;br&gt;&#xA;容器化&lt;br&gt;&#xA;复杂&lt;/p&gt;&#xA;&lt;p&gt;shinylive&lt;br&gt;&#xA;基于WebAssembly&lt;br&gt;&#xA;无需服务器&lt;br&gt;&#xA;可以部署到GitHub page&lt;br&gt;&#xA;较新, 问题较多&lt;/p&gt;</description>
    </item>
    <item>
      <title>shiny-server</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shiny-server/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shiny-server/</guid>
      <description>&lt;h2 id=&#34;虚拟机或物理机安装ubuntu-2204或云服务器&#34;&gt;虚拟机或物理机安装ubuntu 22.04，或云服务器&lt;/h2&gt;&#xA;&lt;p&gt;创建用户的时候取一个中性的名字，该用户具有sudo权限用来执行用户管理等&lt;br&gt;&#xA;比如systemadmin (admin是系统自带的，会冲突)&lt;/p&gt;&#xA;&lt;h2 id=&#34;配置网络&#34;&gt;配置网络&lt;/h2&gt;&#xA;&lt;p&gt;询问网络管理员&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装ssh服务&#34;&gt;安装ssh服务&lt;/h2&gt;&#xA;&lt;p&gt;sudo apt-get update&lt;br&gt;&#xA;sudo apt-get install openssh-server&lt;br&gt;&#xA;查看ssh服务是否开启&lt;br&gt;&#xA;service ssh status&lt;br&gt;&#xA;如果不是active(running)就启动服务&lt;br&gt;&#xA;sudo service ssh restart&lt;br&gt;&#xA;在windows上win+R运行cmd, ubuntu的ip地址是网络管理员给的, 个人的话自己家里的网络，用&lt;code&gt;ip a&lt;/code&gt;查看，inet就是ip地址&lt;br&gt;&#xA;ssh admin@ip&lt;br&gt;&#xA;第一次进去要先yes，然后输入密码，现在可以在windows上通过命令行操作linux&lt;/p&gt;&#xA;&lt;h2 id=&#34;ubuntu内搭建shiny-server&#34;&gt;ubuntu内搭建shiny-server&lt;/h2&gt;&#xA;&lt;p&gt;官网教程&lt;a href=&#34;https://posit.co/download/shiny-server/&#34;&gt;https://posit.co/download/shiny-server/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装R&lt;/p&gt;&#xA;&lt;p&gt;直接按照教程里的&lt;code&gt;sudo apt-get install r-base&lt;/code&gt;安装的R不是最新版的，为了装上最新版本的R，需要多一些操作，参照cran的&lt;a href=&#34;https://cran.r-project.org/bin/linux/ubuntu/&#34;&gt;offical guide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# update indices&#xD;&#xA;sudo apt update -qq&#xD;&#xA;# install two helper packages we need&#xD;&#xA;sudo apt install --no-install-recommends software-properties-common dirmngr&#xD;&#xA;# add the signing key (by Michael Rutter) for these repos&#xD;&#xA;# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc &#xD;&#xA;# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9&#xD;&#xA;wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc&#xD;&#xA;# add the R 4.0 repo from CRAN -- adjust &amp;#39;focal&amp;#39; to &amp;#39;groovy&amp;#39; or &amp;#39;bionic&amp;#39; as needed&#xD;&#xA;sudo add-apt-repository &amp;#34;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install --no-install-recommends r-base&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装Shiny Server&lt;/p&gt;</description>
    </item>
    <item>
      <title>shinyapps.io</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shinyapps/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shinyapps/</guid>
      <description>&lt;p&gt;Posit(原Rstudio)提供的最方便部署shinyapp的方式&lt;br&gt;&#xA;具有不同的定价计划&#xA;&lt;img src=&#34;images/plan.png&#34; alt=&#34;plan&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;免费计划最多能部署5个app, 每个月共计25个小时的免费使用时长&lt;br&gt;&#xA;打开网页即运行app, 默认设置是用户在15分钟内没有操作时, 会与服务器断开连接以节省资源, 所以频繁地打开app, 会快速消耗免费使用时长&lt;br&gt;&#xA;&lt;img src=&#34;images/usage.png&#34; alt=&#34;usage&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>shinyproxy</title>
      <link>https://toxintoxin.github.io/memento/docs/shiny/shinyproxy/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://toxintoxin.github.io/memento/docs/shiny/shinyproxy/</guid>
      <description>&lt;h2 id=&#34;自动生成shiny的dockerfile&#34;&gt;自动生成shiny的Dockerfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jumpingrivers.com/blog/shiny-auto-docker/&#34;&gt;https://www.jumpingrivers.com/blog/shiny-auto-docker/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;functions&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;glue_sys_reqs = function(pkgs) {&#xD;&#xA;  rlang::check_installed(&amp;#34;curl&amp;#34;)&#xD;&#xA;  rspm = Sys.getenv(&amp;#34;RSPM_ROOT&amp;#34;, &amp;#34;https://packagemanager.rstudio.com&amp;#34;)&#xD;&#xA;  rspm_repo_id = Sys.getenv(&amp;#34;RSPM_REPO_ID&amp;#34;, 1)&#xD;&#xA;  rspm_repo_url = glue::glue(&amp;#34;{rspm}/__api__/repos/{rspm_repo_id}&amp;#34;)&#xD;&#xA;  &#xD;&#xA;  pkgnames = glue::glue_collapse(unique(pkgs), sep = &amp;#34;&amp;amp;pkgname=&amp;#34;)&#xD;&#xA;  &#xD;&#xA;  req_url = glue::glue(&#xD;&#xA;    &amp;#34;{rspm_repo_url}/sysreqs?all=false&amp;#34;,&#xD;&#xA;    &amp;#34;&amp;amp;pkgname={pkgnames}&amp;amp;distribution=ubuntu&amp;amp;release=22.04&amp;#34;&#xD;&#xA;  )&#xD;&#xA;  res = curl::curl_fetch_memory(req_url)&#xD;&#xA;  sys_reqs = jsonlite::fromJSON(rawToChar(res$content), simplifyVector = FALSE)&#xD;&#xA;  if (!is.null(sys_reqs$error)) rlang::abort(sys_reqs$error)&#xD;&#xA;&#xD;&#xA;  sys_reqs = purrr::map(sys_reqs$requirements, purrr::pluck, &amp;#34;requirements&amp;#34;, &amp;#34;packages&amp;#34;)&#xD;&#xA;  sys_reqs = sort(unique(unlist(sys_reqs)))&#xD;&#xA;  sys_reqs = glue::glue_collapse(sys_reqs, sep = &amp;#34; \\\n    &amp;#34;)&#xD;&#xA;  glue::glue(&#xD;&#xA;    &amp;#34;RUN apt-get update -qq &amp;amp;&amp;amp; \\ \n&amp;#34;,&#xD;&#xA;    &amp;#34;  apt-get install -y --no-install-recommends \\\n    &amp;#34;,&#xD;&#xA;    sys_reqs,&#xD;&#xA;    &amp;#34;\ &amp;amp;&amp;amp; \\\n&amp;#34;,&#xD;&#xA;    &amp;#34;  apt-get clean &amp;amp;&amp;amp; \\ \n&amp;#34;,&#xD;&#xA;    &amp;#34;  rm -rf /var/lib/apt/lists/*&amp;#34;,&#xD;&#xA;    .trim = FALSE&#xD;&#xA;  )&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;shiny_write_docker = function(&#xD;&#xA;  path = &amp;#34;.&amp;#34;, appdir = &amp;#34;app&amp;#34;, lockfile = &amp;#34;shiny_renv.lock&amp;#34;,&#xD;&#xA;  port = 3838, expose = TRUE, rspm = TRUE&#xD;&#xA;) {&#xD;&#xA;  rspm_env = ifelse(&#xD;&#xA;    rspm,&#xD;&#xA;    &amp;#34;ENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest\n&amp;#34;,&#xD;&#xA;    &amp;#34;&amp;#34;&#xD;&#xA;  )&#xD;&#xA;  from_shiny_version = glue::glue(&amp;#34;FROM rocker/shiny:{getRversion()}&amp;#34;)&#xD;&#xA;  renv::snapshot(&#xD;&#xA;    project = path,&#xD;&#xA;    lockfile = lockfile,&#xD;&#xA;    prompt = FALSE,&#xD;&#xA;    force = TRUE&#xD;&#xA;  )&#xD;&#xA;  pkgs = renv::dependencies(appdir)$Package&#xD;&#xA;  sys_reqs = glue_sys_reqs(pkgs)&#xD;&#xA;  copy_renv = glue::glue(&amp;#34;COPY {lockfile} renv.lock&amp;#34;)&#xD;&#xA;  renv_install = &amp;#39;RUN Rscript -e &amp;#34;install.packages(\&amp;#39;renv\&amp;#39;)&amp;#34;&amp;#39;&#xD;&#xA;  renv_restore  = &amp;#39;RUN Rscript -e &amp;#34;renv::restore()&amp;#34;&amp;#39;&#xD;&#xA;  &#xD;&#xA;  copy_app = glue::glue(&amp;#34;COPY {appdir} /srv/shiny-server/&amp;#34;)&#xD;&#xA;  expose = ifelse(expose, glue::glue(&amp;#34;EXPOSE {port}&amp;#34;), &amp;#34;&amp;#34;)&#xD;&#xA;  cmd = &amp;#39;CMD [&amp;#34;/usr/bin/shiny-server&amp;#34;]&amp;#39;&#xD;&#xA;  &#xD;&#xA;  ret = purrr::compact(list(&#xD;&#xA;    from_shiny_version,&#xD;&#xA;    rspm_env,&#xD;&#xA;    sys_reqs,&#xD;&#xA;    copy_renv,&#xD;&#xA;    renv_install,&#xD;&#xA;    renv_restore,&#xD;&#xA;    copy_app,&#xD;&#xA;    expose,&#xD;&#xA;    cmd&#xD;&#xA;  ))&#xD;&#xA;  readr::write_lines(ret, file = file.path(path, &amp;#34;Dockerfile&amp;#34;))&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;auto-generate dockerfile file&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
